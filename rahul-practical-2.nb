(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    198777,       3951]
NotebookOptionsPosition[    197133,       3901]
NotebookOutlinePosition[    197481,       3916]
CellTagsIndexPosition[    197438,       3913]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[{
 StyleBox[
  RowBox[{"Practical", "-", "2"}], "Title"], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"Rahul", " ", "Chopra"}], " ", "|", "\[IndentingNewLine]", 
    RowBox[{"BSc", 
     RowBox[{"(", "Hons", ")"}], " ", "Computer", " ", "Science"}], "|", 
    "202114149"}], "Title"], 
  StyleBox["\[IndentingNewLine]", "Chapter"], 
  StyleBox["\[IndentingNewLine]", "Title"]}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
  "Plotting", " ", "of", " ", "second", " ", "order", " ", "solution", " ", 
   "family", " ", "of", " ", "differential"}], "Chapter"], "\n", 
 RowBox[{
  StyleBox["equation", "Chapter"], 
  StyleBox["\[IndentingNewLine]", "Section"]}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "1"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", 
      RowBox[{"y", "''"}]}], "+", "y"}]}], "=", "0"}], "Section"], "\n", 
 StyleBox[
  RowBox[{"Solution", ":"}], "Section"]}], "Input",
 CellChangeTimes->{{3.8744708628485675`*^9, 3.87447088582452*^9}, {
  3.874470931520356*^9, 3.8744710557424064`*^9}, {3.8744717345267096`*^9, 
  3.8744717432660246`*^9}, {3.874473937470891*^9, 3.874473961516922*^9}}],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
     RowBox[{"y", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8744710790711317`*^9, 3.8744711036033044`*^9}, {
  3.874471143825922*^9, 3.8744711674754777`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       RowBox[{"C", "[", "1", "]"}], " ", 
       RowBox[{"Cos", "[", "x", "]"}]}], "+", 
      RowBox[{
       RowBox[{"C", "[", "2", "]"}], " ", 
       RowBox[{"Sin", "[", "x", "]"}]}]}]}], "}"}], "}"}], 
  "\[IndentingNewLine]", 
  StyleBox["\[IndentingNewLine]", "Section"]}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "2"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", 
      RowBox[{"y", "''"}]}], "+", 
     RowBox[{"y", "'"}], "-", 
     RowBox[{"6", "y"}]}]}], "=", "0"}], "Section"], "\n", 
 StyleBox[
  RowBox[{"Solution", ":", "\[IndentingNewLine]", "\[IndentingNewLine]"}], 
  "Section"]}], "Input",
 CellChangeTimes->{{3.8744712170600233`*^9, 3.87447121912224*^9}, {
  3.8744712983401604`*^9, 3.8744713159685264`*^9}}],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
     RowBox[{
      RowBox[{"y", "'"}], "[", "x", "]"}], "-", 
     RowBox[{"6", 
      RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8744713195364017`*^9, 3.874471374177878*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"-", "3"}], " ", "x"}]], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"2", " ", "x"}]], " ", 
       RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "3"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", "4", 
      RowBox[{"y", "''"}]}], "+", 
     RowBox[{"12", 
      RowBox[{"y", "'"}]}], "-", 
     RowBox[{"6", "y"}]}]}], "=", "0"}], "Section"], "\n", 
 StyleBox[
  RowBox[{"Solution", ":", "\[IndentingNewLine]"}], "Section"]}], "Input",
 CellChangeTimes->{{3.8744713916187596`*^9, 3.874471423871962*^9}}],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"4", 
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}]}], "+", 
     RowBox[{"12", 
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}]}], "-", 
     RowBox[{"6", 
      RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.874471429583595*^9, 3.8744714893612547`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            FractionBox["3", "2"]}], "-", 
           FractionBox[
            SqrtBox["15"], "2"]}], ")"}], " ", "x"}]], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", 
            FractionBox["3", "2"]}], "+", 
           FractionBox[
            SqrtBox["15"], "2"]}], ")"}], " ", "x"}]], " ", 
       RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "4"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", 
      RowBox[{"y", "''"}]}], "-", 
     RowBox[{"6", 
      RowBox[{"y", "'"}]}], "+", 
     RowBox[{"13", "y"}]}]}], "=", "0"}], "Section"], "\n", 
 StyleBox[
  RowBox[{"Solution", ":", "\[IndentingNewLine]"}], "Section"]}], "Input",
 CellChangeTimes->{{3.8744714973102636`*^9, 3.874471525358118*^9}}],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
     RowBox[{"6", 
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
     RowBox[{"13", 
      RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.874471529289178*^9, 3.8744715613136883`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"3", " ", "x"}]], " ", 
       RowBox[{"C", "[", "2", "]"}], " ", 
       RowBox[{"Cos", "[", 
        RowBox[{"2", " ", "x"}], "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", 
        RowBox[{"3", " ", "x"}]], " ", 
       RowBox[{"C", "[", "1", "]"}], " ", 
       RowBox[{"Sin", "[", 
        RowBox[{"2", " ", "x"}], "]"}]}]}]}], "}"}], "}"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "5"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", 
      RowBox[{"y", "''"}]}], "-", 
     RowBox[{"2", 
      RowBox[{"y", "'"}]}], "+", "y"}]}], "=", "0"}], "Section"], "\n", 
 StyleBox[
  RowBox[{"Solution", ":", "\[IndentingNewLine]"}], "Section"]}], "Input",
 CellChangeTimes->{{3.8744715752069187`*^9, 3.8744716075829287`*^9}}],

Cell[BoxData[
 RowBox[{"DSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"y", "''"}], "[", "x", "]"}], "-", 
     RowBox[{"2", 
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
     RowBox[{"y", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]], "Input",
 CellChangeTimes->{{3.8744716122370806`*^9, 3.8744716469296412`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
     RowBox[{
      RowBox[{
       SuperscriptBox["\[ExponentialE]", "x"], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "+", 
      RowBox[{
       SuperscriptBox["\[ExponentialE]", "x"], " ", "x", " ", 
       RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox[
   RowBox[{
   "Plotting", " ", "Of", " ", "Solution", " ", "Of", " ", "Second", " ", 
    "order", " ", "Differential", " ", "Equations"}], "Chapter"], 
  StyleBox["\[IndentingNewLine]", "Chapter"]}], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Question", " ", "1"}], ":", 
    RowBox[{
     RowBox[{
     "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
      "Equation", " ", 
      RowBox[{"y", "''"}]}], "+", "y"}]}], "=", 
   RowBox[{"0", " ", "and", " ", "Plot", " ", "its", " ", "three", " ", 
    RowBox[{"Solutions", ".", "\[IndentingNewLine]", 
     RowBox[{
     "Solution", ":", "\[IndentingNewLine]", "\[IndentingNewLine]"}]}]}]}], 
  "Section"]}], "Input",
 CellChangeTimes->{{3.87447168916591*^9, 3.8744717182991543`*^9}, {
  3.8744717645415106`*^9, 3.8744718154702387`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
      RowBox[{"y", "[", "x", "]"}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol1", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "2"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", 
      RowBox[{"1", "/", "2"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "5"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol3", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", 
      RowBox[{
       RowBox[{"-", "1"}], "/", "2"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", 
      RowBox[{"-", "4"}]}]}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Sol1", ",", "Sol2", ",", "Sol3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "20"}], ",", "20"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Red", ",", " ", 
        RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Green", ",", "Thick"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Purple", ",", 
        RowBox[{"Thickness", "[", "0.02", "]"}]}], "}"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Sol1", ",", "Sol2", ",", "Sol3"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8744718359187613`*^9, 3.874471920592581*^9}, 
   3.87447195150866*^9, {3.874471983614382*^9, 3.8744721989912763`*^9}, {
   3.874472256977374*^9, 3.874472296445181*^9}, {3.874472343439206*^9, 
   3.8744723647373066`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], " ", 
      RowBox[{"Cos", "[", "x", "]"}]}], "+", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], " ", 
      RowBox[{"Sin", "[", "x", "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8744723690791073`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cos", "[", "x", "]"}], "+", 
  RowBox[{"2", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.874472369080413*^9}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"Cos", "[", "x", "]"}], "2"], "+", 
  RowBox[{"5", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.8744723690827794`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", 
   FractionBox[
    RowBox[{"Cos", "[", "x", "]"}], "2"]}], "-", 
  RowBox[{"4", " ", 
   RowBox[{"Sin", "[", "x", "]"}]}]}]], "Output",
 CellChangeTimes->{3.8744723690881963`*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0], 
          Thickness[0.01]], 
         LineBox[CompressedData["
1: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
D70T8Oz8ewypyjCcTNSYw6OP7NYVf40hhQYho01Oc7hwOoemWDrpN291Rb8H
c/hx6/1/3RMxJC5kxDFcM4cnCBg0cJD+5Tvj9Y1QmccVkcSdPQEY4uIML1J3
nMfdzrsd7fLEEPu7hCdP7s7jI148TFUnyXliNaevzM3jTta7ZO8ZYWg1o3vf
L4UF/OvPjmw/XdJ3FlOq1scWcK6af/vfymFoPElsTqN8Abcf+LNXiRFDv41o
nUlTC7h/y8TkmWkKGhozKWWXXcS3JmSZrvZTUJe+T/jIzUX842zilGYxBdW2
1fOnHF7C39NXcjqcKagiqH+JI3wJ9y+7bPr7AAWVysz1BhQu4aknsik2uhSU
7y314qjYMv7ViX75MCMFPeX027r51zJe4cugUaSzgSe+uy0SJLSCH295IjG1
Sscf2T9bHzVbwZ9NSu+Zr6Tj0Zmfa6pzV/DayOnN5w/ScX9jWZtg/1X8il/q
f9ZH1nGr4Ga/vxzruOidiD+Kaqv4QdkR+2O71vH8ayo1JkMruGnj6q4673X8
Q9JCrP3jFXyXsCLr8/Z1nGnrqXRP+jKuWnD1sf1TOl7+I+BZDCzhDH4CvS4i
FKR5QVrrlhDZp1NZrcXkOUTHHU79LpzH8/fjDZyWFARJgRqmR+dxZ6lzhQUR
FFTNaxYse3cOr6wvjWWaoyAbVoutsDiDXxdz2ZtOOnsW5z11Yvc/nKkiP/fn
dUZE2/pR98joIH48e98LvaeMiMnh9frQ3ABeENf75HYJIxps2ZaTKdSPu7iz
3NKZZkSW/wl5qB3rxmv47E9fP8GEUu8EGgQ2teIRrpiw7HZmFCvUHjSUnYOz
clqGOU+yIE/ewOPHvnYTdor2sI2NFZlMMHzSeNlLZO1x2WCXY0XxYSJMlUH9
hEWA/9V3x1iRVYZ8nhvPD+LRSGoAUw0runnkKaPcm2FCoWL64ssnm5DMelBE
aOlfwr93NS+wcBOiXs+7JJQwTjQuMk9ZtGxCZma54HlpgvDSEPVaZGFDcfiV
eVXFf0Thkz3upj5sqKXLw27ZcJrY6/fAecyUHRW7XJrcc36OeHQv+Vn5aXY0
NGxwz/LrHDGakzF4P4Qd5e3ZpXxJa56I/vnxxM4CdmTHfY42/m+eaLMcto+W
4kCz1hcrVU4vEgqekwmndnCgwYWjoz5li4T/zaVO3aMcCDxGufIElwjxck7b
vigOJHrM/eNyzRLhorrVWmOBA3UHK1WdFFohCk3w+ww8nKjbrrpp+OwKscnZ
rKVDlROpfL3dhj6sEDnxjof+c+JEQnvflV6wWSXmmCMONH/mRHekRs+bXVsj
rg92GPk834yiG6fkJJLpRP+HA+f9SzejlyKfFC520IkdD+BRSPtmxK4+7vWY
a4OY2pv1J4qVC4XnCphaBW0QJ7Kv3n3uwYX2Db2ZlZUl/RM+U/wqnAs9PGu6
f2UHBQROuA29SeZCLp57vtGsKPCZ+/DW0q9cSPPV13kIocAOP7meNp0tiDVJ
XNG0mQKPDiUw9ZhvQQ0Ke2O5f1JgWolL48eZLcjfjkbokHkxs2cxdOLxFlSe
0Jp7UwgDpveeWbN5W5D3+wypIkUyb8b8+LbcsAU9dL1TuEsPA8HdnxRY1rag
gGmtdesjGOhvpipFsHOjkO6TsYNOGIwEdBuwCXGjd7bR3FVeGDwceXg4WpYb
hbenb6wEYrDH+pDrFi1uZP1MfORmBAZTBFvQfQNupBM0ZXXuHgYpatV3Bcy4
UfrvrJ4UMk8vM2//IObMjQZvdRcx5WLw0mf2S4oXN5paNbfVJd10ZOD1kHQQ
N3Kxz8gqLMOAwfzsYvpNbhRHuXj2djUGecUynEoPuZHo228H8xsxOCHfR81O
5UbvZVMkVZsx4Lj/eKvGa25kZmXyYp70TzH98P63H8j9h//N5+kiveTBeVK3
lhtdELOT+o/0D39nrW9RKzfiFGFsMBwg875xWOSOAW5k5M4Td5D0ivfbncll
f7kRMW5z4f+ekZBceIuWuFGwru3+U6R3GqPyaquYeFDxFhOp02Ttv+jeY8LD
g4IbWCcLyesVXOSnGiR40HMVWpkDuV5b8wDTQRUeFLSdNfEw+bxrhokizdt4
0GRRSHw8uR+trCMa1kY8aNepnd+0yP32C24x6jjEg1wGYzxE2zG4fb3B9thx
HsT+8Mqto+R59aeue/ae5UEG6ykOQ2Q/Ro7vCjt5mQf1r9oKVZD9etiwFDcU
xoNGq5KWpsl+7tn2LutMDA+Kv8+55zLZ76m088RoIg+KlfljcICcR8oWpTaP
DB4kMsC3/RLpIfPgodHJdzwosoP9ztT/5zeatH4ReBCT5684IOf78qgt7/xn
HpRab1k0TM7/SCWPon8XD5LnjHZwDCLn9STCMmSGBwmtai4cdMbgE1/E7y0U
XpR063F6ojW539s3Qp5t5kVbndpmpYwxEA8Oz6lW4kUydJrJdxkM9OauG9ls
40XPMw7Vs/OQHvS83v3biBdlqKr+CaBTIPL4tU0cJ3nRotV5V67vpHfawp4m
efKihFmPyK2VFCg3D9umEciLOFiM257kUGDOINTlcBwvEm2xalP+jwKnJELg
8SdetDeGvfKsGAWC4q7aKnfxormIP7tfUsjvbfPVyZIRXpRm+NHQtnGD+Lwe
JN6P8aFKGmurvN0God8f4C+nz4fQp6qcKWc6wf30stbbdD7UgF1eKiHdpyp0
uW5PPh8qbxeRvzq+SpjcvXSijeBDRNN2BvrTVSL4P9/oxW4+1L4okmzGuEqM
nrw4asjDjx5bDQl6flwmgHo+tfEqP7r599cnpfkFoifeU+/4bX5UK1zzLvbx
ArHA7dk0Ec+Pcsp+vpjTXyDUMI817gJ+ZO82XVjhP0/E/zhrZzvGj+RMY93G
xmeJC2ku3MM2Asiz/2SPW/YUEROQkBRzmqy1tSW+m0wRuZZNStu9BdBG9b8j
JlX/iEm63u6YWwJIcOcOniqVScLTgcNHv1QAFUhLPPv6d4xw58//Fi0tiOQv
PAt3MhwmXCM2Hm0dF0T+vE3M2a4NRISjruzgkiAKxkKR70AN8VL33JsoZiEU
ia8rn7KtJH4NtdYNSAqhUxMl5zyiCgkX/OXSrcNCaPB++Fqg6GPcecncvr9Q
CIWLMDBwKXzFT7gnStwME0Zx7HkDfSm/8NUutqbpO8Lo3JvoLC2fETzeLCDk
eKIwWlsbUM02/o23KNkN0N4Jo/KJuleLI6O48W+BZ73DwiiQt3eIlzqOK7vc
k9M2FUGXVw33NmpM47XfKO1JR0SQHw+T+eDdadzZyPsGq5MIsnCVEDk4NY0n
yRwa6Q0QQeM2hpHib2Zwrh+cmTezRdB5qP2oITeHzzlGqvZxiSKqZX+B0J8F
PPbLYs8+MVGkYalRO2+4iKsbukXnK4oivPnS0Oy9RdxV3GTiJhJFu97xPTXS
W8K7uhnfaPuIouD3itXdfsu4337fk8khoiip6r8Y5+plnLdkaMum26Ko/vEU
1wz3Cm6eUOHd91wUpQ1kFIhnrODltv9pR7aLouGqFAOrulXcoW5yaOaHKBIk
tlEbONfIXH7igeOkKLqlnF9CO7yG0wQN57RZxdDM2M+WLx1reHrbyvs+fTEU
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
3O0gPQ==
          "]]}, Annotation[#, "Charting`Private`Tag$2872#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 1, 0], 
          Thickness[Large]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$2872#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0.5, 0, 0.5], 
          Thickness[0.02]], 
         LineBox[CompressedData["
1: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
          "]]}, Annotation[#, "Charting`Private`Tag$2872#3"]& ]}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-20, 20}, {-5.024937810504335, 5.024937304379345}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       RowBox[{
         RowBox[{"2", " ", 
           RowBox[{"sin", "(", "x", ")"}]}], "+", 
         RowBox[{"cos", "(", "x", ")"}]}], 
       RowBox[{
         RowBox[{"5", " ", 
           RowBox[{"sin", "(", "x", ")"}]}], "+", 
         FractionBox[
          RowBox[{"cos", "(", "x", ")"}], "2"]}], 
       RowBox[{
         RowBox[{"-", 
           RowBox[{"4", " ", 
             RowBox[{"sin", "(", "x", ")"}]}]}], "-", 
         RowBox[{
           FractionBox[
            RowBox[{"cos", "(", "x", ")"}], "2"]}]}]}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.18]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.18]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5], 
                    Thickness[0.36]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5], 
                    Thickness[0.36]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.01`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "Large", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.5, 0, 0.5]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.02`", "]"}]}], "]"}]}], "}"}],
            ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8744723694082947`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  StyleBox[
   RowBox[{
    RowBox[{
     RowBox[{"Question", " ", "2"}], ":", 
     RowBox[{
      RowBox[{
      "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
       "Equation", " ", 
       RowBox[{"y", "''"}]}], "+", 
      RowBox[{"y", "'"}], "-", 
      RowBox[{"6", "y"}]}]}], "=", 
    RowBox[{"0", " ", "and", " ", "Plot", " ", "its", " ", "three", " ", 
     RowBox[{"Solutions", ".", "\[IndentingNewLine]", 
      RowBox[{"Solution", ":", "\[IndentingNewLine]"}]}]}]}], 
   "Section"]}]], "Input",
 CellChangeTimes->{{3.874471826450116*^9, 3.8744718279026737`*^9}, {
  3.8744723895400352`*^9, 3.874472405502931*^9}, {3.874472441342752*^9, 
  3.8744724684014206`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"y", "''"}], "[", "x", "]"}], "+", 
      RowBox[{
       RowBox[{"y", "'"}], "[", "x", "]"}], "-", 
      RowBox[{"6", 
       RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol1", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "2.5"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "5"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol3", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", 
      RowBox[{
       RowBox[{"-", "1"}], "/", "2"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "5"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Sol1", ",", "Sol2", ",", "Sol3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Pink", ",", " ", 
        RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Green", ",", "Thick"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Orange", ",", 
        RowBox[{"Thickness", "[", "0.02", "]"}]}], "}"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Sol1", ",", "Sol2", ",", "Sol3"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.8744724885900526`*^9, 3.8744724947034883`*^9}, {
  3.8744725871992345`*^9, 3.874472650270811*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "3"}], " ", "x"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{"2", " ", "x"}]], " ", 
      RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8744726545512676`*^9}],

Cell[BoxData[
 RowBox[{"2.5`", " ", 
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{"2", " ", "x"}]]}]], "Output",
 CellChangeTimes->{3.874472654552457*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{"-", "3"}], " ", "x"}]], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]]}]}]], "Output",
 CellChangeTimes->{3.874472654552457*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", 
    FractionBox["1", "2"]}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{"-", "3"}], " ", "x"}]]}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{"2", " ", "x"}]]}]}]], "Output",
 CellChangeTimes->{3.8744726545544*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0.5, 0.5], 
          Thickness[0.01]], 
         LineBox[CompressedData["
1:eJwtlGs01HkchzXTbC65025ltK4rVAi13b6/FFGNzaxCLvMfu4s1bomM7Oqm
g01ppVLarYwyloZCyOUXkcuptUmNy5QYRMIYRmNW8986Z198zvPmefG8+pgE
RzN/oqioqDA+7TPXwrJ3JEniI9NESNGhAoieN0ubV5C40e/O45+PF0Bpmb3l
jIzEwSF5EfaZBeBgxQgeGSfx75avboiKC2CDbkrvEyGJGU6NnrzRAkDi6fYr
JSRmxvdOzLH5wEx9WrSeReL4XFfOgH8hJHSkRIbWK/HQ+aN3TKKKoKtL410D
+yNuqQjRKnYpBfrDaIMNRgs4j6qyo1u7DCo4TTTtVwpcR+kJbXK7D0SGvaTn
5DxObo+L0Wc/AHlWUhoGOdY+aGtgLK4Hntbr5TkDc7iGX1hXy2yEa7vtY5+n
y7De7AW6RnEznIxgc1d7zGKuxhpmhG8bJFH/SoidkOJMRmbKMrW/gX28w/wl
fxr/OB6b0ZfzDC7WDedcC5dgxYGIVZbnuuBBv9XSYtNJfHNb+AeudzeY6SAX
7z/HcXwYUy0jUQT3rNPCB8WjuEhW/Ths8A30N9/92tl5BGf+GnlWb04Mw7YX
HfB9MXaW3nl0bP9b0E0udF67aAALaekVfN442DpP2d6aEeHTO3MNstdJ4NTO
iX+quUI8FF1DyXKaAUNvwXm/Lzsx87Sblbx6Du7NNWu3mrfjCkH6deolBdzq
Gz47llKPHVN3EZWnSAj0Mirv+yEfHwxQWC/mUlC1etKLxngeVHXoS1nZNOQ0
uMj4hC+GLGsvsjRDDZlJauY3NbYB40LquZVjmsiD1/PU07cTMrOSk/PqdJEr
Q48qqxCC8c3WqgaFAcpkCY/bVYrAO2K6S5n6FWrxpGvu0xuAQVD1e6JDRxMm
hsmdV8Xg6UVfmveFCYqPs2FnLhsBvcjL7PhBMyQU6TBDWkeBv7ts0DHtG0Qk
bnm7ZO843Of4Sran26BHNht+e0SbhOBTO+PXf2+HLNVqR/PdJZBUGkdgs/WI
XstxpaVNw+Qr1pr8IGekoqAUxg5KIcYoeo9+8ib0wasuqNliFvwpayTvaYD6
HFkrLVJkcHQ49shQqAuK8dHRNRXNgb6NY39hsytanj3ku5guB+nK8gXDBA8k
8L9RMMOdh18SQy22r/VEPluPubfWKcBt78ZQ4xIvdDco0nTTwr8wcklKVPG9
kVx9B7V6/0ewclI/mhPni5jPNjvTc5QQU2UhnbgegNQ3azTU/qGEbj/Nl/rl
Aaghv3dPAE8Jl6MiR3e1BiA7biI7V6CE7w6fedgrCUBaqyozljcroUPB9Sl2
CURtEQ5iQ6kSDg9vWaQ6FoiQ6urzWntJSAnTaxtDLCQ/JF8h8CKhfW46cOwA
C5X0tdxi+JDwjlMeJY9gIeOSkJqMYBImx06sc73CQgv780fUE0mwM2Cwr0pZ
qJK3auuS2yQkDTTlGnsTKEpzquV2EQkjpoK+aywCWSbUM93uksBJPONgxiFQ
9u7AsNO1n3yjic3uJwkUO331AvU5CR3uVYGzpQSy9g835nWTIDiYJSurJdBA
07eFLq9JmGoI6kxqJdC+nO76E2MkbBStiDV/QyBVCt/DZOpTr+wBor0nEOYk
dD2cJWHFRgFn8gOBjrxwYxEKEqjmQnk/lY3+/y/YxjKa7NFmo/8ArpNvtQ==

          "]]}, Annotation[#, "Charting`Private`Tag$3148#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 1, 0], 
          Thickness[Large]], 
         LineBox[CompressedData["
1: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
Af+R3JdPSpvwz4U1RYEyEljKfuLYlNaE3NS6tckSEkQfz4lwe9mEFtmLvuVI
Ah6VrPAbDk1YxOT5710BCcj6aSHGHE14xPhQPEsOCbKEAvLV6JqwZ2amyy6L
BLqrV0ekZhpxJ29+dWsGCfyj+OSYKhrRef1LRX0qCYSdNqyWsxpx+q3kD4sU
EpSpdAcMRTUiW7ak058kEmyMh/fn327E5c1ZsaaJJHhT4LT9g3UjWv8roPB+
IIFc0FnpsLONGDVhKT31ngTO0oz/2Qk14u9tM5sy40iwa9tohiFbI86xJ2a9
f0frR0dJl8pGAxbXvBlNiCXBmKe7BE9bA9qPS3+tiybBI10jI8ZvDTgbOW20
FEUCioDMw8XUBizzY70sQvPXpd0pA68a0Cj1eNfVtyQwqZxurXnSgNQ89s/Z
kSRYeV39L8+pAR/vMFzeQXO4Q6Loe7MGFErJDbv5hgRS8OT8s9MNyK+26j/4
mgR1bNaenjINGMY70W5Os92o0ofrfA2oxWV1e/wVCRjzuBsvMDdg7Ec5ay+a
NclzS4/m61GvyfAFheYn+UmnL1bVo+3+1N31L0lQbHH57dF39Xgo9nCtH81r
W3nndrrV446ffeW6NB9NalcdPVePr9e+rQjQ7Kjz7OVX0XqMMJk0p6M5cVFz
8vnmehxfurUy/YIEQ6+2gmNnHaYLuX8do5mHKApTz6xDk9SDqb9pNhi585PX
rw6Lkj9/W6M5xE9KYcWyDo/HGK+x0+5XJTERVC9Xh12W+roEzVtb4oc+sNah
D/tC8S2aiXvmsvfHa/G4nJ9GDs1uvJz+RsU0+zgPb6K9X05pY6/ky1o0pN8T
ZEzz9LUAqe03a/HoWptqEc0iLGpPBk/V4quRI1sP0/pnnb3R8WV/LRa4xVUm
0xxplCceulKDcfGpQUdp/WeNO9hy8kMNHpWq3m1Lm4+mxqgwt3cN3pXeXclO
m+fjqSj3BYMafPHvgnM9zdRjbALx22ow0eP188u0fBzprb7t0VeNLfHMjMox
JLB/+KRKP7carTxsrERpeRqsoTrR21TjehJj4T5a/nics8p7Fatxo4T+s2g8
rV8c9ly55GoM/afzVJmW1yqr/mKb8irUkQz4Ek7Lc9Zy+a5KwSqc8gyrqqSd
h6Ckd9+UVn9gnQTXeb00Wj7MvV0/1dL89Vzar3QSCH6X6353+weaaT6pU84m
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
          "]]}, Annotation[#, "Charting`Private`Tag$3148#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0.5, 0], 
          Thickness[0.02]], 
         LineBox[CompressedData["
1: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

          "]]}, Annotation[#, "Charting`Private`Tag$3148#3"]& ]}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-2, 2}, {-110.16615421297979`, 183.89510944660492`}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       RowBox[{"2.5`", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"2", " ", "x"}]]}], 
       RowBox[{
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
            RowBox[{"-", "3"}], " ", "x"}]], "+", 
         RowBox[{"5", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "x"}]]}]}], 
       RowBox[{
         RowBox[{"5", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{"2", " ", "x"}]]}], "-", 
         RowBox[{
           RowBox[{
             FractionBox["1", "2"]}], " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{"-", "3"}], " ", "x"}]]}]}]}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.5, 0.5], 
                    Thickness[0.18]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.5, 0.5], 
                    Thickness[0.18]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.5, 0], 
                    Thickness[0.36]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0.5, 0], 
                    Thickness[0.36]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[
                    0.6666666666666666, 0.33333333333333337`, 
                    0.33333333333333337`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0.5, 0.5]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0.5], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.01`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "Large", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0.5, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.33333333333333337`, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0.5, 0]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0.5, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0.5, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.02`", "]"}]}], "]"}]}], "}"}],
            ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8744726546129303`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", "\[IndentingNewLine]", 
  StyleBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Question", " ", "3"}], ":", 
      RowBox[{
       RowBox[{
       "Solve", " ", "Second", " ", "order", " ", "Differential", " ", 
        "Equation", " ", "4", 
        RowBox[{"y", "''"}]}], "+", 
       RowBox[{"12", 
        RowBox[{"y", "'"}]}], "+", 
       RowBox[{"9", "y"}]}]}], "=", 
     RowBox[{
     "0", " ", "and", " ", "Plot", " ", "its", " ", "four", " ", "Solutions", 
      " ", "for"}]}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", "i", ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "=", 
      RowBox[{"-", "1"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "=", "4"}]}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", "ii", ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "=", 
      RowBox[{"-", "3"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "=", "6"}]}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", "iii", ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "=", 
      RowBox[{"-", "10"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "=", "7"}]}], "\n", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"(", "iv", ")"}], " ", 
       RowBox[{"C", "[", "1", "]"}]}], "=", 
      RowBox[{"-", "1.5"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "=", 
      RowBox[{"-", "5"}]}]}], "\n", 
    RowBox[{"Solution", ":", "\[IndentingNewLine]", "\[IndentingNewLine]"}]}],
    "Section"]}]], "Input",
 CellChangeTimes->{{3.8744727012770615`*^9, 3.8744727287485356`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Sol", "=", 
  RowBox[{"DSolve", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"4", 
       RowBox[{
        RowBox[{"y", "''"}], "[", "x", "]"}]}], "+", 
      RowBox[{"12", 
       RowBox[{
        RowBox[{"y", "'"}], "[", "x", "]"}]}], "+", 
      RowBox[{"9", 
       RowBox[{"y", "[", "x", "]"}]}]}], "\[Equal]", "0"}], ",", 
    RowBox[{"y", "[", "x", "]"}], ",", "x"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol1", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", "1"}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "4"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol2", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", "3"}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "6"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol3", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", 
      RowBox[{"-", "10"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", "7"}]}], 
    "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Sol4", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "/.", 
    RowBox[{"Sol", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"C", "[", "1", "]"}], "\[Rule]", 
      RowBox[{"-", "1.5"}]}], ",", 
     RowBox[{
      RowBox[{"C", "[", "2", "]"}], "\[Rule]", 
      RowBox[{"-", "5"}]}]}], "}"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"Sol1", ",", "Sol2", ",", "Sol3", ",", "Sol4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Red", ",", " ", 
        RowBox[{"Thickness", "[", "0.01", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Green", ",", "Thick"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Purple", ",", 
        RowBox[{"Thickness", "[", "0.02", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Yellow", ",", 
        RowBox[{"Thickness", "[", "0.03", "]"}]}], "}"}]}], "}"}]}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Sol1", ",", "Sol2", ",", "Sol3"}], "}"}]}]}], "]"}]}], "Input",
 CellChangeTimes->{{3.874472758095338*^9, 3.874472943423958*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"y", "[", "x", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", 
      RowBox[{"C", "[", "1", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x", " ", 
      RowBox[{"C", "[", "2", "]"}]}]}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.8744729522454586`*^9}],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[ExponentialE]", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}]}]], "Output",
 CellChangeTimes->{3.8744729522464914`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"3", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}], "+", 
  RowBox[{"6", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}]}]], "Output",
 CellChangeTimes->{3.8744729522471933`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "10"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}], "+", 
  RowBox[{"7", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}]}]], "Output",
 CellChangeTimes->{3.8744729522493124`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"-", "1.5`"}], " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}], "-", 
  RowBox[{"5", " ", 
   SuperscriptBox["\[ExponentialE]", 
    RowBox[{
     RowBox[{
      RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}]}]], "Output",
 CellChangeTimes->{3.874472952250873*^9}],

Cell[BoxData[
 TemplateBox[{GraphicsBox[{{{{}, {}, 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 0, 0], 
          Thickness[0.01]], 
         LineBox[CompressedData["
1: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
Df4HScfuVA==
          "]]}, Annotation[#, "Charting`Private`Tag$3285#1"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0, 1, 0], 
          Thickness[Large]], 
         LineBox[CompressedData["
1:eJwV13k0Vt33AHDzc5MkQ6kQSiQaVDLEPkWUkESRQooUeVWECGn4KiWEV71C
SKZMkSGca57neZapJ5nHxxC/+/vrrs9a59x17j777H2umMU/+pYsTExMxsxM
TP//VAuSUrrXsoylkiLhaZchaf768FSH1xKOX1tShpkLJCPA1RsDA4sqKQ6W
BOuQv4QKRjWUGBgW6vckPNYhW2M4dGqPMrDyWIVJ5E0d8luO/5aefQy8Lyvm
UamcDmk38OXDMh8D1wrsPDJUp00OHm5OPEZfxOz9NmY2m7TJ2nqZhgS/RbyU
JRNtFKRFRnH3bg/5uYDDhORrTrdqkgEmQFPsXsAWX80jUws0Sa/YiLmO1gV8
Ij59t8xXTdLi1I26ndULOH42hk3nmSYp/pD+LPz7Ao74HnFM5YgmGdkzMxnj
s4C/yzlsrXunQUYk0kozji3guBWtrc5mp8lQrcP3m17O44dfjTz/iKiRezZq
VdY/m8dsECY2wK1GJlRZiNd6zONEl20fBtdOkTnagY3ljvO4QHfrAkffKbJD
d1Eu//o8Vjsm/6k2/BS59WLebKziPI6+RCOu7j5FvjU56+j+ew7LbIn/e1Lu
JOlle91539k5PPfL0+FHlyrZ62samqM2h7lEwtHtfFVSKdWEPKc6h5euaI7I
fFIlZ+YNCbsj1HyzhKfzVqrkdQ+tkDThOfzacNXu1awKiQKOZCnPzOKZr59u
fedRIdcy2Rk6/83i3c5vsr9dUSZdWeOd7o/P4Gf0DgtNaQXS7r0phzl9Bg9k
JDh94FMgLQ7yBekMzmAhIj/q7+pxUsvELU2qYwavXl0RnKs7Tgp+0x3vLZ7B
0gU+VyMeHifTLWYtzoXO4IyNx5+Ml8qTEwUndPeco95/uRQEHhwjr3vW7WmN
ncaCShtMni/KkZc6wlV7oqaxyGDS/ukhOVJLzt5oKGwaCzRckL3TKEceHeJ5
PRM4jQfKX0c+/SpHEmf0Z7mfUPOlGu0u3pQjkza3FGgaT+MPlXvtzJoPkyth
nabZG6axrLvC6lTeITIobzgk9M4UPmYnIhhwR5Y0df7gftxyCo+l7HwxeEaW
lDpy/maj2RROGOBxPS8pS+bEZh0kDKewVPr21IdDMmTvO5/SBzCFZ7i/6jOZ
y5CSdw7PafFP4bsO/dlTJvvJ+7LLYTOuk3jqkVR3pdU+MqdPiitRfAJX8zWm
JBVLkG4nmL9+EJzAoSwTVtPxEqTK+w6dl9wTeON4s4+mvwRJ6r96a7U8jkPG
P03KmkqQZSV/eMUax3EP9e0/GXvI5oSk7cFPxnHGo5DPnYf3kBNORyU9+8dw
ysbvRG6qOLmbB50yCPuDc64RLPo1u0jfQz8f3Xn3B9vrbQk4Gb6LZOh5ffP0
/oNPMFfTL9/bRVb7F+/5ev8PTllcd2UI7CId+M7SODT/YMbfeQWO6yJk6Vb9
6szJUXzUwlH9xJoQeUf45qWdJ0fxgYCLy5cNdpBp0t53Bgbp+JXX08qU2wLk
rgbz7P0ddMxwsH90+LQA+dpJkXCspWPfV/WWDaICpGXx6GdaNh1XxlwNtmvn
JwVNdX7K+NJxwAR9fudZfvKxP6+RkwIdh0WE/XvwEB95hhF6muvNL9ws+cIn
mn8L2VeSKiovP4KnRMY3vbjJSbpdXFJXkBnBDhExjtWynKTgT3RbSXwEq5//
q40WN5B6q3Wpqtwj2C3Jtj751QaSlJs4pTkyjIXqatrivxFkRLi0pVHwMI7I
X/Fb2EQjLVyi4h4tDGF+oY8JAoOs5LBMkBz+PohDUuIEbvOuYmn3zxP0hEHs
JxrWdTttBdvVZcTzfhrEr0XjW4r1VzDjXqu4lc8gztIYvOIduIw5M7fxbTIf
xClNvpaqQkv40MkPs1c2DGKjOY1RmRML2NUwPH3BZAAnRr3YrJc7hcmYZHvR
CwN4yvCt7PZbU5iNgWW0NAawgcU9l6O8U9j3Q3/0x0MDWGpMTKugcQJH9IkF
qbMP4H7uBsUtx8dw6e1ox4Cknzik+PyJYuFfeIt7nPwB5p9YdOv5h/ZkJ37x
XaqcZ7Ef269tPjAa04GXJ74Yz471YyThFWrt244HzGLcstr7cYrPx3x781ac
djKq8FRKP2aSHBH8wNOI9dk/6l4268ei/k90LU8WYcntYjVMrn3YU5jh9YIv
B3he7ZoqserDTPv+/V/aah4wloX5fPT7MLmYv413moTy7h3GAtKUa/K9puuL
wTqCf3hfRy9m8vcwfv2oGuIlib/6x3uxfdIDl/0/WkBGflLm82w3jiULOc5z
DIDVAQ+P7J5ujH7f8r/jPgDhezc31pR1Y2ddRV6OhQHg3XbQaeG/bjy1rvE8
f3AQFhftCjTVu7G3mQknyh6GwuwJw9HALkwXwa5d2r/BSGXC/aB8J0704ap9
xTUFAcfcG9REO7GU3DD/ApqCKlnuPUacnbhaKUhf0nEKVEUOVHj2dmA/TZvb
3d1TsHv9Ll/jiw7cvPxuLShuGibI8S8Obe1Y3XqHrJ3CLDxVH6/Pdm7DdNW7
zr9kFqDwzNj5ozfasNHGMe1A4wVg0vlTm6TThh+ZvHLhfrEAboa/q6PE2zBD
r8/FpncBHloNl7+pbsVWErzW1a8Xwdq7h7wu2ooFleP3a/czQLu6JmVDeTP2
/V195/yNFXhVX33wWVozZssNkZ15uQLlzVVJa6HNOMavbeOtlBU43VOROHuv
GdeyGCeWra6A6kRJbM/OZpxe/PGB9btVOMSTH5H6TxO27bziqpn1FwQMkvyM
tzVi05Abdvd+rkPaXp+c06yNuDkOlg8zMSG9pVtDhycbsDr3d+n3m5nQqzAx
Bc6yBqx0V+TV4QNMaI0e2JfzsAEPZRTk+txhQiOPXQ8ItdbjLtpi1HQfE7I7
7x+St68O79Bc0+nLY0axc1pjQcx1+O897cGDVcxo4D0bsuuoxcVPSJp9OzO6
NOT0S+RlLSbvih/CM8wIXEzlPek1eLABTD7sZUE8UfubT32pxgbx7EO6Piwo
baFkc/meShxsLmLNfpYV+cZHFqouVeC9bvv8LhqyIhtTD8eMmgocw/FM2u86
K9pTqtAV+bACV3qOTDW7sKLgoISYx+XlmPlfg2u+cazo0VF/lSO2ZZhg+Xil
hp0Nnbp/1SbsWzEu7tJh6ktlQyJ7FUUEvItxYtwXiW25bGilQ6DB52ox/uU3
7gGlbCj9ZJ28C3sxDt61QlzvZEN7t5xiMbhchD/yHxmkM7MjzhTJ9xtWCrD4
1/dnt+myo89dw29+P8vH/sYeHme72FGn29bwj0fysUuPuyH/IDviFtFMuTCQ
hznbXtU0jrKjh+axjdmQh/mKy6qkl9mRxvCdba+Wf1D3BZNtZwQ5EH1iMkLa
Phu/G1V5ifQ5kDTL8jcbk3Ssxnzjvm0eBzKNki7ZxZmODWZWbPOLOFCAuklr
U9Y3HMQtpMJeyYGWX+QylLd+wwXR6V73WjlQ1UYPFa6GVLwzEKJKJjhQuzTh
a/wmCd/brylxU5iGrl0QSu+6EY3D2Iu0su7T0NjsvKJjcRTuP8h/4aMTDbkF
12FuiSj8oOBBgrMbDYV2eVWdHPmEn2sedON9QUPpVY0l5xvC8NnyvTZNITSU
PGe7m94ZiKs71a/459JQraLowZ2h73AsC++FPpKGJtyblHSvBWDvuTrBPSU0
ZMTrEG2N32LN1QjFgBoauqjMzcJc8Ryr1HIFMffSkGezVPPOIh0sf51H48hf
GpLZ3HOHXfYo8O7Oap5mIlDrtFc4D8MIjqvxJH5hI5DrO41Km6P2wPaYV39p
I4GKRF/+7yOPF/yw2aJ5bAeBbt2Stvq+FgDPUrzFtx4j0BlxpytPVQLBiT0l
XFuBQFI9Rbp6bkHwNcmw/ZEygUb1rx0fXfoXglglQ/JPEshW1Y8QmQ8FepqE
wJAOgbI5XVsKHaNAJUVz89ebBIqQFWhKFo8Gy7aCtdBbBHqhl1wfWhcNWVnu
GU/vEMggeLDq4b4YyLjO/d8xewJNiWkXSvfEAv8m9WMyrgTaqyicHKCeBLke
TjTbtwTiupqZ6DGdBM8uq96o9ifQrPuFeNuwZJg5Hs+1J5BA5gOF+rvdUsCA
S+52dgiBDkgt6vxtSQXBpXmZx58IVPHNTD31ZTrsLlT5808qgU6UyBRJ9qfD
TzePP2e+ESildelkmHwGlEp9y96eQaDgpXfgM5gBaYVH+yKzCHQTypUsVTLh
A6uylAEmULteUHbXu0z4olJ3b4wk0DkLCwX90UyIbtYscyskkNzz1WPwbxYk
776f/ryEQOuVhw5vn86GN6dP2ipWEeh+99/kt5o5YOLx/XdANYFGxisPcITl
ALQGJg/VEKiax1JmVusHPNS/KXevnkAfLr2XrInOBcbWlcEDLQTitraKUVvJ
hcnNbxzOtRLoicsRiZwLeRBTE+Nt3kYg69Aa8S9refBNMcTIoYNAxwaYRZ4Y
YXjCpWeh1kPFJ+fy9KE4DJ55wLa1l4p3wNfi/iUMLnqCFwcob/yUeCxCh4Ts
PfHc1v0EIt5c3sVwJOGZxtgLsZ8EYnNh2aAXRoINz76iZsqrekbd6xMkuC46
hUkNEohxgrX08rYCqMicOVNBeU4qKTkZCuCJjWLtjSECjTGxPTXzK4ALq3Ue
L4YJRB9Lss3MKoC0t9aZ3CMEGmo3vrT5ZwFs8zbt96Pck5K8Dx8uhOM+5UJP
fxGoM/QK37YrhSCfbKk8S7nVm/2vnVchJP2Tdv0anUCNDikjpfGFsOyjGFRA
udbcpF6kqRBkup907fpNoEptjpyHK4XgcZFbyZlyqUJqVO3uIihjMf1eSTmf
h+bk7lAEupMHRUxHCZSzmmreGloECoxQ/nDK3+lXtQ6UFIF2S6RqJ+W0ZtrR
F+NFMH7+66fNfwiURKYJ9woUQ8y1PWpAOT7xGk1etRhCxG2lblOOCSGm31gV
Q9fs0KU3lCOffesc9i2GEeM/TQmUw+1Ni1Uyi2GWtz26mHLo1Q1JQX3FYC7A
VNdGOeRM+r/jtBLYFJB+eZhy4FGzJ6cPlUDJwin1ccp+opw2H41KwH9q7v0k
5ddcGQbzniUgbMdjOkbZm2GmqhNHzY9sCxqk/GyIU+pzQwlcZX+p0ULZsz5j
y9+lEsgwNnMsoOyWa75iIF4KxQn+krGUnWM3DidqlYKv4UWLl5QdAr/Xsj0o
hTqmZmlLyvae17Ou/lcKJ+LghTJlW1uuyPSiUhgKy3fhomxtlOnDNVYKTt6O
nO1U/G6qWzje5C+D95bPVcIoXz+0ySz3RBkc8N8oaEbZVCjrDL9lGcQWiYXv
oHyFuCFn+6YMzgv0ttVT+6Xfn8Uu1FsGijff3pelrFt9Y/IBRzk0Pg/rbaL2
XyuLu6PqAGU+bx5Hyqf8bia6epSD9tnFji9U/qi6bQ5u+lIOP+0euSpSVrLO
8dhfXw7BzE0LJVT+ySGei12iFeBi3O5bR+Xr7qkfS0qFFeAcq1j7mcpvtxq1
Z3PjFXBpbWGYmXJrfBV30vZKeOI9t8togECvLLt2i92rhI8br/HNUudpqnNZ
hyZaBVy3AqIGe/5/fV7t5LkqsIwUc9lCOTqI88YjpyoI5Kn7pNhNoMt6O5zH
a6sgqu49m0snlZ8lipFNj6vB7rZ7Zjp1/gWjCmTexFWDZX5yTQZVH+57ns3U
aKmG5pYUq9RmAkkoG1dny9TAukaUQkgjlQ8pzgvhXTVQKVm/vqeWiud/mVq2
inWQNxglhYoJlO4MLRKWdXD0vffuMaqecV8qM+vzqwM/vaN/AwoIVMDT5qBP
r4Nl71M3GvIJxK/mej70XD00mk8Hbcmm+k/WBxev5XpoCBWwjE6k+smXXlUz
ngZYKegdYEogUHOQONuJvQ0Qdm892CiOqkcP4n3nLzSAiEhw5tJnAg3I5kRZ
xzVAfZKBHWs4gc5GddToGjXCu9mLGop+VPyeJ1mV3G2EYEuPrwa+1Hmwfrqu
/LQRxD+FlNm8puqJrOzhfUmNwE+USL7xpvI9yzOQla0J8ou8hT96Eqi8RtIk
K7kJFNW+rc3/QyBNhiNdjNYC0WDcnnCOQBOdWk9ChFpA1M8rSuMs1Q/ydu3Y
LNcC0+Oy6T0aVL32qji3erUF9l2wz2Q6RfW3TcLJrWkt4P0wPn8H1T9LxYsd
fUxbYR5zvIncTaDTOrys8xltEP4yzkKEQUO+1zdML1W0wYT+Sv+jeRpqd2Tq
W+tpA+dExcDmGRq6EzaRQ3C0w/7tp2M8xqnxk5X3hS61A1OPX0P6ADXe/+mA
2kI79Ye/iT2smhrfOlcQIN8JaY9lrZ6E0dBbszbPQ5ndcEvX9echZRoq0xXe
pMf7E/63uZBp6gwHGhcTcG/8MAh4uvqSCnV/c3TYf/3t1hGI3PTO7clZNtTW
zaNvVU6HTt3gHbwSrMjc5cQvmvYfEOtMaijgYUFF+4+/KmKfgFzj5VztESa0
d0MuPfrMFIj0B3cqx66DcK7NaXbvaXDYLnlFMPQvMC2zxN0fmIHO5S9rrQ9X
YPFCnmmJxBy47XK7Ku2zBF1HzXZKPJuHjPN3hW++XQT7yzxbxLsXwNvA8W5w
5jxsDxwyYhNmgEW7e+PytjlIMon4Muu8BDtyNm8H+xm4rOJxpjxvGchM22tZ
f6cg1fSuuBL138C9+rGW6+IkMDjVWLMN/wKKYHCwRo2BfoOyvHDIGjBru2Ez
3VHgVN5YkPtxDYy6uyyM1EehILrz3NWoNdCwCdMyUBqFQ84u1/9LWoOr32OH
DPeOAveuzNfbS9bgbti5Q55rv6HCVm5QYGYNDuT/8bNP/g2I2OfHrb0OWyvN
Sn/w/QbGPcaOpAvrsOU1c8JOzt+Q3FX2WefyOgjaeee7M/0GkWSrH68t1sG2
7uU/uuN0WDWMHuF0WYfHUQdH+MrokBm1S4UWsw5Cp6Vey7vSwW7TZFlMwjok
KZVxVdyjw16nfH2N1HX4R1gr1dSaDoFa16yf567DFQn5G+8M6XB/+sM71qZ1
IIsVLosfooO0yR2RqPZ1CE14OVizlw4/ixXjTvWug2T3QV83YTrohbTnP/m9
Ds8U0pQHOelAsMSeFZtcBxHRfSr/MdMB2zg1k3PrEFMhfeUS4xc8bNEwM1+m
1neSLYB/8hccgK2j6+vrcPs+y1DL8C/4Pzg+2mY=
          "]]}, Annotation[#, "Charting`Private`Tag$3285#2"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[0.5, 0, 0.5], 
          Thickness[0.02]], 
         LineBox[CompressedData["
1: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
sFwWcosE+0F2hsPhAJ+7dFtlDAn+B8CNAls=
          "]]}, Annotation[#, "Charting`Private`Tag$3285#3"]& ], 
       TagBox[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[1.6], 
          RGBColor[1, 1, 0], 
          Thickness[0.03]], 
         LineBox[CompressedData["
1:eJwVlnk8VV8XxpUMCUklSqaEZKaSaZ1okKFEIgoVKiINhqhIg0hK4acyJEM0
mEskCyHzPFwz9yIk85x773vev87n+9n7nP2ss9fz7C1+/qqpw2oWFpazq1hY
/v+8KajKk1e5gPeWJqbMcwyJeN4eocj+ebRV9Vj+LqFPRBkoX28KnMM6n+qk
A1l6hP+Vc167js4iX8jV11Q1gugJsYnK05vFEC3esnkpgtDIsC401JlFzQHD
0U1CBDE9Z87pqjqLPAaLa3qWgTjnaxCZuX0Wj35b9FB9CgTxQvWb5vQMDumo
WQR80SEYOWyLxm9mcHFAy957kzbhw/rB8/rfaTwfCqP9nBqE6ysbdrvhadyW
vmysOLOfOK+4MdyYNo0mY6JXn3TvJwysb2fKtE8j2zMovZq5nxDMOva3p2Qa
nw8I//x9Zj+RfX7mvGHUNF55OibzNFudGC/SOiZpOI0qjsJVV133Eef86iRb
k6fQSveez1euPcSp9lid7vgptM2UyqlcVCMMVNwsB2KmsCszc+OfITVCbYAv
eDpsCl1KejaY/FQjOPVNZ3jvTeG564InP9xWI1LXtxQdOT2F0V98g15NqRL/
YjpsctdOYaBGtYvSgAoR/mMwMsppEnl8uTvzRpUIG6/Xd/c5TGK5KetJiw4l
Qkb1uH2j7SQSZqLrWCqViLzkb4qc5pNY+mndRo8UJaLn5ZOyGzCJ7NI5iTOX
lAhpJ+VZg02TKLxGO8S6WZG4Lr8cM+0zgX9klflqRuWJvF4Z7k8S46iypDFy
20qWuK216vNrwXF0aey9JXtAltB+1W4cyDuOd7e8Xj8qLUsUmgY9c1z+iyGv
+oVj53YRv0r/8Is3/sUxs73+vaG7iOaPqUIR9/5ih1J4SlqNDDHuqSbt1zeG
55OtTAhTaWIHH6F7MuYPNnrWCtQFSxIhSv3eTi//oPVrq3iquySxaOKf5ff4
Dxav5yI4bSWJ6tASyc/X/+Bj51nPQGVJ4ubGoxzsR/6gxFLco/NtO4gyAdPq
nIlRlONosLGX2kE4bbc/te3AKH7iPxVq2iBOZMo+dqLShnGVRpZZdLoIIdpg
l7u7fRhZbawsip6IEMGe+znda4fRLysxevVFEcKhZDSRI3cYJy3647q2ixCC
Nsb9ciHD+OJV0emx4O3EnVB+S091cr6o5b7LbsKE/mLUIe6nv9FDxzTPxGgr
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
Xd57BbaCJe0jpz3JBZW6xERMKwTUf933jWTHz1vaHbJbQem1lPGaErLfn49d
66pohYvyXCf0Sf56vYjLrLcVgi47GT4g2cY8Ir5ithV0JA0OfiOZXd1Zi+Bq
g/vySXoDJKduJVq+irZBtpn7Cc5SBp6ib3KV39MGLy8mu0uSzOgdYU8waAN9
QvabOslJxQWxW+3awA57xQ6RfCzxpXqoexvUN7/POUryfMClBo4nbTDsb/3g
MMkxTtpOd9+2gSm1JkST5EPG/KxzX9qARaq6R4bkkHNrp5Yq2iCBW8uPj2SK
O0svo7sNdpH3uylSn3jQQjXrdBuQ2VpSRbJTzHgeJzsFxnJbbsaSnJU5mMyz
lQIHtE8+uULySllXBL8CBSTPZvCqknyos+nBFl0KhBpKsM2Q/y9kovK68CkK
3Oxou/mJ5DbWYjtxJwpY3WVcsCVZTDD3mNRdCmieKKCsI9lJLl1r9wsK7N6s
2Z5B7lcW8V5WKYkCW/aFOZ8geeVkjOCePArcaBgIHyX39/DlcHaNWgosp+rZ
3CGZEnqfqjdPgeHea/3PyP4QT/Ku1+dqBzPT08nrSXbKu1ZgLNIORw19dwaS
/bVCtX1tcbgdqiQeW10m++/QwqnHZ6zagcpzTqT+B6l/3TGPc67tMB1tn65E
srialqlzRDuoH0851Uv2u5O+KuH2oR0+YIGHPMnZZ2QV3Avaodbr/W33PFLf
Q0Eu3yHyfTuXEzOkf5xaZ4te7O2AhFCt4qQvZH2jf9L+M+iAQBGf7JJsUg+D
Gh1l0wHNVwS+d5F+DJFuuJX0qAPaG04L/yP9muX1WTmvtQPO7/pbO/WZnB+c
IIqjHaA4wrGmn/T/4bg3PCWMDpiqXu1TSeYDpSJwpEaqE5yZPIeCU8j5Wx3j
+j06wdegZrCKzJ9DimefDQV1Qsdzy7Kn8eR6eifv/InphP/OH95s8I6s94ru
6bmyTnibDJsyY8nv/xDZsHZLF+TaBigSZL49s23zU8rpguCI2PDTIaS/x7Rg
qLoLBAL8br8LJv176x39DbULuL4/1xoMIv330sWbg7cbqPGsFyzJ/D32i/Vm
j303JC67sc77kv5SVLoYzN8DMl8dzTa5kf7JD9+pK9MDco5hg3QX0h/6/2gL
2j3ADErN7Sfzffx8md2Fyz0w/n3ngciLZB5EnLHSKOyBNVqed4tsyHoYj42H
XXohfmWXPJcRqe/J+LqY+73gbf+y/vVRUp/gyUqzV71wo+edkNQRUp+K6BEs
6YV7MovZcroMlM6yEqvi6QM5H+Pc5X0M5Pg9KfTOvg/U0xMUYyUY+OvYdh4T
/n7glAuPUCHP100K/QLXhfuhQvp7mMUUHe14EsXCpPpBjaU70GucjstVcmoU
jX5g3zznlDpMR7mjWtZ2F/rBYCP1wWgXeX/Qs05xy+6H/Ai1yfcldLRSf3Uo
9BQVaJv1C8xD6fhXfPPdxtc0eM5sS70gRkd1n7hrRQk0ODW80yNPmI7+zfIO
6ak0+A9LLXiF6CgQcNgopJgGv5XGPD9voKPOmOdWg1Ea+L+jBFespuOzrx1f
i/YPwItPTZy3B1ZQ2fDtRDplADg+BhT2J66g+83d554JDIGDrnfVBfEVbOvi
M3UsHwaVz4v94UPLaHdL6zeH0R94YCGn9yJ5CX/u3hf0k20ctt6cPV0Jiyi1
Nn84QX8SmMVJ98N+z+P2fOdDbI+ngL3ltzNH+ByyLK9OuU6dhnloLk/cNYsL
J37YlO6cBdVp4YjK7mnsVLPdtvPBHMQlpbjBvSl0s+DbINE1D0a2hhwv1SdR
KGzAcs32RTDJOT7EkBrHVOu372e8lkCh1Ut5ufIPWmj76pf/WIZSpmJx+ZcR
zLBxkdBY+Qfs2SPXDMt/4yKXHmuuOR10uIe6njYMommD5t7tkQyQyA9M+bB1
ALk01xXlRzNgPlRe5+DGASxK6DA8E8+AXw+LuPrWDaCS161zb1IZsPNEhIEI
nYa8ojnBQqUMyHg3cuZLLw0rrqjQNk8zQPH3QJBxIg0Jzl3PeY2Y0BZJm9qh
QsPFa4tbU08wIedM7BTrbhqmdf5KNLZggtq+aNGhHTQUSXP8HnyeCXFXBdgy
NtNwxTxhiOsWE5prpsfslqiYEy+qzZHEhF2btvyWKaKiK8/Er6SPTAjooMbv
zqOilGeB6eEMJjgHpwUqZVExzODspYf5TCgNna4lEql4fer1S9YmJvC/jdvr
E0hFWWsnkXgKEwqWF5Wf+VOxv2R/im4PExg5kWaJPlQ0iaQU3BthgmSoCSfF
hYqcq5OPik8w4UJWzutZRyqis2dz4SwTIg+xmW60o6JHy2Fbu2UmnN7XJ692
mooKIDDKZDKhWntC3sKUiv8DMTTSIQ==
          "]]}, Annotation[#, "Charting`Private`Tag$3285#4"]& ]}}, {}, {}}, {
    DisplayFunction -> Identity, Ticks -> {Automatic, Automatic}, 
     AxesOrigin -> {0, 0}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, DisplayFunction -> Identity, 
     PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.05], 
        Scaled[0.05]}}, PlotRangeClipping -> True, ImagePadding -> All, 
     DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
       AbsolutePointSize[6], "ScalingFunctions" -> None, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
            Part[#, 1]], 
           (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{-2, 2}, {-87.42988577734707, 55.4323103353263}}, 
     PlotRangeClipping -> True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.02]}}, Ticks -> {Automatic, Automatic}}],FormBox[
    FormBox[
     TemplateBox[{
       RowBox[{
         RowBox[{"4", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{
                RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}], "+", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{
            RowBox[{
              RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}], 
       RowBox[{
         RowBox[{"6", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{
                RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}], "+", 
         RowBox[{"3", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{
                RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}]}], 
       RowBox[{
         RowBox[{"7", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{
                RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]], " ", "x"}], "-", 
         RowBox[{"10", " ", 
           SuperscriptBox["\[ExponentialE]", 
            RowBox[{
              RowBox[{
                RowBox[{"-", "3"}], " ", "x"}], "/", "2"}]]}]}]}, 
      "LineLegend", DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.18]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[1, 0, 0], 
                    Thickness[0.18]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0, 1, 0], 
                    Thickness[Large]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5], 
                    Thickness[0.36]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    Opacity[1.], 
                    AbsoluteThickness[1.6], 
                    RGBColor[0.5, 0, 0.5], 
                    Thickness[0.36]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 0, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0.6666666666666666, 0., 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 0, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 0, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 0, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.01`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> RGBColor[0., 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0, 1, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "Large", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.5, 0, 0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.33333333333333337`, 0., 0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[0.5, 0, 0.5]"], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.5, 0, 0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.5, 0, 0.5], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.02`", "]"}]}], "]"}], ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[1, 1, 0], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> 
                    RGBColor[0.6666666666666666, 0.6666666666666666, 0.], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "RGBColor[1, 1, 0]"], Appearance -> None, BaseStyle -> {},
                     BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[1, 1, 0]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[1, 1, 0], Editable -> False, Selectable -> 
                    False], ",", 
                   RowBox[{"Thickness", "[", "0.03`", "]"}]}], "]"}]}], "}"}],
            ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", "None"}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8744729523347874`*^9}]
}, Open  ]]
},
WindowSize->{1920, 989},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (September 21, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1275, 32, 358, "Input"],
Cell[1836, 54, 383, 10, 30, "Input"],
Cell[2222, 66, 1007, 30, 168, "Input"],
Cell[3232, 98, 415, 12, 30, "Input"],
Cell[3650, 112, 1009, 31, 134, "Input"],
Cell[4662, 145, 462, 14, 30, "Input"],
Cell[5127, 161, 1323, 42, 157, "Input"],
Cell[6453, 205, 439, 13, 30, "Input"],
Cell[6895, 220, 1107, 33, 134, "Input"],
Cell[8005, 255, 418, 12, 30, "Input"],
Cell[8426, 269, 1311, 35, 227, "Input"],
Cell[CellGroupData[{
Cell[9762, 308, 2534, 77, 145, "Input"],
Cell[12299, 387, 386, 12, 30, "Output"],
Cell[12688, 401, 176, 5, 30, "Output"],
Cell[12867, 408, 200, 6, 46, "Output"],
Cell[13070, 416, 220, 7, 46, "Output"],
Cell[13293, 425, 98731, 1699, 239, "Output"]
}, Open  ]],
Cell[112039, 2127, 744, 19, 111, "Input"],
Cell[CellGroupData[{
Cell[112808, 2150, 2457, 77, 145, "Input"],
Cell[115268, 2229, 482, 15, 34, "Output"],
Cell[115753, 2246, 157, 4, 30, "Output"],
Cell[115913, 2252, 261, 8, 30, "Output"],
Cell[116177, 2262, 327, 11, 45, "Output"],
Cell[116507, 2275, 29124, 562, 246, "Output"]
}, Open  ]],
Cell[145646, 2840, 1701, 53, 296, "Input"],
Cell[CellGroupData[{
Cell[147372, 2897, 2962, 94, 164, "Input"],
Cell[150337, 2993, 576, 18, 34, "Output"],
Cell[150916, 3013, 347, 11, 30, "Output"],
Cell[151266, 3026, 374, 12, 30, "Output"],
Cell[151643, 3040, 394, 13, 30, "Output"],
Cell[152040, 3055, 394, 13, 30, "Output"],
Cell[152437, 3070, 44680, 828, 242, "Output"]
}, Open  ]]
}
]
*)

